 plugins {
     id 'java'
     id 'checkstyle'
     id 'com.github.spotbugs'
 }

 group = 'io.ballerina'
 version = project.version

 repositories {
     mavenCentral()
 }

 dependencies {
     checkstyle project(':checkstyle')
     checkstyle "com.puppycrawl.tools:checkstyle:${checkstylePluginVersion}"

     implementation group: 'org.ballerinalang', name: 'ballerina-lang', version: "${ballerinaLangVersion}"
     implementation group: 'org.ballerinalang', name: 'ballerina-parser', version: "${ballerinaLangVersion}"
     implementation group: 'org.ballerinalang', name: 'formatter-core', version: "${ballerinaLangVersion}"
     implementation group: 'org.ballerinalang', name: 'ballerina-cli', version: "${ballerinaLangVersion}"
     implementation group: 'org.ballerinalang', name: 'ballerina-tools-api', version: "${ballerinaLangVersion}"
     implementation group: 'org.ballerinalang', name: 'ballerina-runtime', version: "${ballerinaLangVersion}"
     implementation group: 'com.google.code.gson', name: 'gson', version: "${gsonVersion}"
     testImplementation group: 'org.testng', name: 'testng', version: "${testngVersion}"
 }

 test {
     useTestNG()

     testLogging {
         exceptionFormat "full"
     }
 }

 checkstyle {
     toolVersion = "${project.checkstylePluginVersion}"
     configFile = rootProject.file("build-config/checkstyle/build/checkstyle.xml")
     configProperties = ["suppressionFile" : file("${rootDir}/build-config/checkstyle/build/suppressions.xml")]
 }

 def excludePattern = '**/module-info.java'
 tasks.withType(Checkstyle) {
     exclude excludePattern
 }

 checkstyleMain.dependsOn(":checkstyle:downloadCheckstyleRuleFiles")
 checkstyleTest.dependsOn(":checkstyle:downloadCheckstyleRuleFiles")

 compileJava {
     doFirst {
         options.compilerArgs = [
                 '--module-path', classpath.asPath
         ]
         classpath = files()
     }
 }

 spotbugsMain {
     def classLoader = plugins["com.github.spotbugs"].class.classLoader
     def SpotBugsConfidence = classLoader.findLoadedClass("com.github.spotbugs.snom.Confidence")
     def SpotBugsEffort = classLoader.findLoadedClass("com.github.spotbugs.snom.Effort")
     effort = SpotBugsEffort.MAX
     reportLevel = SpotBugsConfidence.LOW
     reportsDir = file("$project.buildDir/reports/spotbugs")
     reports {
         html.enabled = true
         text.enabled = true
     }
     def excludeFile = file("${rootDir}/build-config/spotbugs-exclude.xml")
     if(excludeFile.exists()) {
         excludeFilter = excludeFile
     }
 }

 spotbugsTest {
     enabled = false
 }

 publishing {
     publications {
         mavenJava(MavenPublication) {
             groupId = "io.ballerina"
             artifactId = "json-schema-core"
             version = project.version
             artifact jar
         }
     }

     repositories {
         maven {
             name = "GitHubPackages"
             url = uri("https://maven.pkg.github.com/ballerina-platform/json-schema-tools")
             credentials {
                 username = System.getenv("packageUser")
                 password = System.getenv("packagePAT")
             }
         }
     }
 }

 publish.dependsOn build
